
Disjoint Union Sets (DSU or Union Find).
    - Use cases: Anytime we need to create distinct groups in some given graph.
        * Keep track connected components in an undirected graph.

    - Complexity:
        * Space: O(n)
        * Find: 
        * Union: 


Depth-first Search (DFS):
    - Use cases:
    - Complexity:


Bread-first Search (BFS):
    - Use cases: Anytime in graphs or arrays where you need to check neighbors first in a sequential (or recursive?) pattern. Some examples below:
        * Flood fill.
        * Level-order n-ary tree traversal.
        * Shortest path from root to some node in a tree.

    - Complexity:
        * Time: O(V + E), where V = vertices and E = edges.
        * Space: O(V). This is so because we need to allocate a queue for each vertex.


Binary Search:
    - Use cases:
    - Complexity:


Hash Map:
    - Use cases: Anytime we need key/value pairs. Great for keeping track of how many of some key we have.
    - Complexity: O(1) lookup, O(1) insertion, O(n) size.


Hash Set:
    - Use cases: Anytime we need to keep track of a distinct set of items. Similar to a Hash Map, but narrower applications.
    - Complexity: O(1) lookup, O(1) insertion, O(n) size.


Floyd's tortoise and hare algorithm:
    - Use cases: Perfect for finding cycles in a linked list or any directional graph.
        * Finding loops in graphs.
        * Finding the node in a graph where the loop begins.

    - Complexity: 


Memoization:    
    - Use cases:
    - Complexity:


Trie (Prefix tree):
    - Use cases: Anytime words are involved, especially with regards to auto-complete/word filling.
    - Complexity:


Monotonic Stack:
    - Use cases: 
    - Complexity:


Priority Queue (Heap):
    - Use cases: 
        * For Dijlstra's shortest path algorithm.
        * Anytime you need to dynamically fetch the 'next best' or 'next worst' element.
        * Huffman coding.
        * Best First Search algorithm.
        * Prim's Minimum Spanning Tree (MST) algorithm in directed graphs.
        * Generally useful in graph theory algorithms.

    - Complexity:
        * Binary Heap construction: O(n)
        * Polling: O(log(n))
        * Peeking: O(1)
        * Adding: O(log(n))
        * Naive removing: O(n)
        * Advanced removing w/ hash table: O(log(n))
        * Naive contains: O(n)
        * Contains check w/ hash table: O(1)